// Code generated by mockery v2.40.1. DO NOT EDIT.

package conch

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockCache is an autogenerated mock type for the Cache type
type MockCache[P Hashable, R interface{}] struct {
	mock.Mock
}

type MockCache_Expecter[P Hashable, R interface{}] struct {
	mock *mock.Mock
}

func (_m *MockCache[P, R]) EXPECT() *MockCache_Expecter[P, R] {
	return &MockCache_Expecter[P, R]{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, key
func (_m *MockCache[P, R]) Get(ctx context.Context, key P) (R, bool) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 R
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context, P) (R, bool)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, P) R); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(R)
	}

	if rf, ok := ret.Get(1).(func(context.Context, P) bool); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockCache_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCache_Get_Call[P Hashable, R interface{}] struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key P
func (_e *MockCache_Expecter[P, R]) Get(ctx interface{}, key interface{}) *MockCache_Get_Call[P, R] {
	return &MockCache_Get_Call[P, R]{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *MockCache_Get_Call[P, R]) Run(run func(ctx context.Context, key P)) *MockCache_Get_Call[P, R] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(P))
	})
	return _c
}

func (_c *MockCache_Get_Call[P, R]) Return(_a0 R, _a1 bool) *MockCache_Get_Call[P, R] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCache_Get_Call[P, R]) RunAndReturn(run func(context.Context, P) (R, bool)) *MockCache_Get_Call[P, R] {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function with given fields: ctx, key, value
func (_m *MockCache[P, R]) Store(ctx context.Context, key P, value R) {
	_m.Called(ctx, key, value)
}

// MockCache_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type MockCache_Store_Call[P Hashable, R interface{}] struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - ctx context.Context
//   - key P
//   - value R
func (_e *MockCache_Expecter[P, R]) Store(ctx interface{}, key interface{}, value interface{}) *MockCache_Store_Call[P, R] {
	return &MockCache_Store_Call[P, R]{Call: _e.mock.On("Store", ctx, key, value)}
}

func (_c *MockCache_Store_Call[P, R]) Run(run func(ctx context.Context, key P, value R)) *MockCache_Store_Call[P, R] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(P), args[2].(R))
	})
	return _c
}

func (_c *MockCache_Store_Call[P, R]) Return() *MockCache_Store_Call[P, R] {
	_c.Call.Return()
	return _c
}

func (_c *MockCache_Store_Call[P, R]) RunAndReturn(run func(context.Context, P, R)) *MockCache_Store_Call[P, R] {
	_c.Call.Return(run)
	return _c
}

// NewMockCache creates a new instance of MockCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCache[P Hashable, R interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCache[P, R] {
	mock := &MockCache[P, R]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
