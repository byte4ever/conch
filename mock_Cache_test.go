// Code generated by mockery v2.26.0. DO NOT EDIT.

package conch

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockCache is an autogenerated mock type for the Cache type
type MockCache[P interface{}, R interface{}] struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, key
func (_m *MockCache[P, R]) Get(ctx context.Context, key P) (R, bool) {
	ret := _m.Called(ctx, key)

	var r0 R
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context, P) (R, bool)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, P) R); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(R)
	}

	if rf, ok := ret.Get(1).(func(context.Context, P) bool); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, key, value
func (_m *MockCache[P, R]) Store(ctx context.Context, key P, value R) {
	_m.Called(ctx, key, value)
}

type mockConstructorTestingTNewMockCache interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockCache creates a new instance of MockCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockCache[P interface{}, R interface{}](t mockConstructorTestingTNewMockCache) *MockCache[P, R] {
	mock := &MockCache[P, R]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
