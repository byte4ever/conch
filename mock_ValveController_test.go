// Code generated by mockery v2.26.0. DO NOT EDIT.

package conch

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockValveController is an autogenerated mock type for the ValveController type
type MockValveController struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx
func (_m *MockValveController) Execute(ctx context.Context) <-chan bool {
	ret := _m.Called(ctx)

	var r0 <-chan bool
	if rf, ok := ret.Get(0).(func(context.Context) <-chan bool); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan bool)
		}
	}

	return r0
}

type mockConstructorTestingTNewMockValveController interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockValveController creates a new instance of MockValveController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockValveController(t mockConstructorTestingTNewMockValveController) *MockValveController {
	mock := &MockValveController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
