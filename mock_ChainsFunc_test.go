// Code generated by mockery v2.40.1. DO NOT EDIT.

package conch

import (
	context "context"
	sync "sync"

	mock "github.com/stretchr/testify/mock"
)

// MockChainsFunc is an autogenerated mock type for the ChainsFunc type
type MockChainsFunc[T interface{}] struct {
	mock.Mock
}

type MockChainsFunc_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *MockChainsFunc[T]) EXPECT() *MockChainsFunc_Expecter[T] {
	return &MockChainsFunc_Expecter[T]{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, wg, inStream
func (_m *MockChainsFunc[T]) Execute(ctx context.Context, wg *sync.WaitGroup, inStream ...<-chan T) {
	_va := make([]interface{}, len(inStream))
	for _i := range inStream {
		_va[_i] = inStream[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, wg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockChainsFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockChainsFunc_Execute_Call[T interface{}] struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - wg *sync.WaitGroup
//   - inStream ...<-chan T
func (_e *MockChainsFunc_Expecter[T]) Execute(ctx interface{}, wg interface{}, inStream ...interface{}) *MockChainsFunc_Execute_Call[T] {
	return &MockChainsFunc_Execute_Call[T]{Call: _e.mock.On("Execute",
		append([]interface{}{ctx, wg}, inStream...)...)}
}

func (_c *MockChainsFunc_Execute_Call[T]) Run(run func(ctx context.Context, wg *sync.WaitGroup, inStream ...<-chan T)) *MockChainsFunc_Execute_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]<-chan T, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(<-chan T)
			}
		}
		run(args[0].(context.Context), args[1].(*sync.WaitGroup), variadicArgs...)
	})
	return _c
}

func (_c *MockChainsFunc_Execute_Call[T]) Return() *MockChainsFunc_Execute_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *MockChainsFunc_Execute_Call[T]) RunAndReturn(run func(context.Context, *sync.WaitGroup, ...<-chan T)) *MockChainsFunc_Execute_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockChainsFunc creates a new instance of MockChainsFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChainsFunc[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChainsFunc[T] {
	mock := &MockChainsFunc[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
