// Code generated by mockery v2.40.1. DO NOT EDIT.

package conch

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockDoer is an autogenerated mock type for the Doer type
type MockDoer[T interface{}] struct {
	mock.Mock
}

type MockDoer_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *MockDoer[T]) EXPECT() *MockDoer_Expecter[T] {
	return &MockDoer_Expecter[T]{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, id, param
func (_m *MockDoer[T]) Execute(ctx context.Context, id int, param T) {
	_m.Called(ctx, id, param)
}

// MockDoer_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockDoer_Execute_Call[T interface{}] struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
//   - param T
func (_e *MockDoer_Expecter[T]) Execute(ctx interface{}, id interface{}, param interface{}) *MockDoer_Execute_Call[T] {
	return &MockDoer_Execute_Call[T]{Call: _e.mock.On("Execute", ctx, id, param)}
}

func (_c *MockDoer_Execute_Call[T]) Run(run func(ctx context.Context, id int, param T)) *MockDoer_Execute_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(T))
	})
	return _c
}

func (_c *MockDoer_Execute_Call[T]) Return() *MockDoer_Execute_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *MockDoer_Execute_Call[T]) RunAndReturn(run func(context.Context, int, T)) *MockDoer_Execute_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockDoer creates a new instance of MockDoer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDoer[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDoer[T] {
	mock := &MockDoer[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
