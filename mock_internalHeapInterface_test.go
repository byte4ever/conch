// Code generated by mockery v2.26.0. DO NOT EDIT.

package conch

import mock "github.com/stretchr/testify/mock"

// mockInternalHeapInterface is an autogenerated mock type for the internalHeapInterface type
type mockInternalHeapInterface[Index Ordered, Payload interface{}] struct {
	mock.Mock
}

// Len provides a mock function with given fields:
func (_m *mockInternalHeapInterface[Index, Payload]) Len() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Less provides a mock function with given fields: i, j
func (_m *mockInternalHeapInterface[Index, Payload]) Less(i int, j int) bool {
	ret := _m.Called(i, j)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, int) bool); ok {
		r0 = rf(i, j)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NextToPop provides a mock function with given fields:
func (_m *mockInternalHeapInterface[Index, Payload]) NextToPop() Indexed[Index, Payload] {
	ret := _m.Called()

	var r0 Indexed[Index, Payload]
	if rf, ok := ret.Get(0).(func() Indexed[Index, Payload]); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(Indexed[Index, Payload])
	}

	return r0
}

// Pop provides a mock function with given fields:
func (_m *mockInternalHeapInterface[Index, Payload]) Pop() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Push provides a mock function with given fields: x
func (_m *mockInternalHeapInterface[Index, Payload]) Push(x interface{}) {
	_m.Called(x)
}

// Swap provides a mock function with given fields: i, j
func (_m *mockInternalHeapInterface[Index, Payload]) Swap(i int, j int) {
	_m.Called(i, j)
}

type mockConstructorTestingTnewMockInternalHeapInterface interface {
	mock.TestingT
	Cleanup(func())
}

// newMockInternalHeapInterface creates a new instance of mockInternalHeapInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockInternalHeapInterface[Index Ordered, Payload interface{}](t mockConstructorTestingTnewMockInternalHeapInterface) *mockInternalHeapInterface[Index, Payload] {
	mock := &mockInternalHeapInterface[Index, Payload]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
