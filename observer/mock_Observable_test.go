// Code generated by mockery v2.36.0. DO NOT EDIT.

package observer

import mock "github.com/stretchr/testify/mock"

// MockObservable is an autogenerated mock type for the Observable type
type MockObservable struct {
	mock.Mock
}

// Notify provides a mock function with given fields: i
func (_m *MockObservable) Notify(i interface{}) {
	_m.Called(i)
}

// Register provides a mock function with given fields: o
func (_m *MockObservable) Register(o Observer) error {
	ret := _m.Called(o)

	var r0 error
	if rf, ok := ret.Get(0).(func(Observer) error); ok {
		r0 = rf(o)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterChan provides a mock function with given fields: o, c
func (_m *MockObservable) RegisterChan(o Observer, c chan interface{}) error {
	ret := _m.Called(o, c)

	var r0 error
	if rf, ok := ret.Get(0).(func(Observer, chan interface{}) error); ok {
		r0 = rf(o, c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unregister provides a mock function with given fields: o
func (_m *MockObservable) Unregister(o Observer) error {
	ret := _m.Called(o)

	var r0 error
	if rf, ok := ret.Get(0).(func(Observer) error); ok {
		r0 = rf(o)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockObservable creates a new instance of MockObservable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockObservable(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockObservable {
	mock := &MockObservable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
