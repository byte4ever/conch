// Code generated by mockery v2.40.1. DO NOT EDIT.

package conch

import (
	"github.com/stretchr/testify/mock"

	"github.com/byte4ever/conch/domain"
)

// MockHashable is an autogenerated mock type for the Hashable type
type MockHashable struct {
	mock.Mock
}

type MockHashable_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHashable) EXPECT() *MockHashable_Expecter {
	return &MockHashable_Expecter{mock: &_m.Mock}
}

// Hash provides a mock function with given fields:
func (_m *MockHashable) Hash() domain.Key {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Hash")
	}

	var r0 domain.Key
	if rf, ok := ret.Get(0).(func() domain.Key); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(domain.Key)
	}

	return r0
}

// MockHashable_Hash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hash'
type MockHashable_Hash_Call struct {
	*mock.Call
}

// Hash is a helper method to define mock.On call
func (_e *MockHashable_Expecter) Hash() *MockHashable_Hash_Call {
	return &MockHashable_Hash_Call{Call: _e.mock.On("Hash")}
}

func (_c *MockHashable_Hash_Call) Run(run func()) *MockHashable_Hash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHashable_Hash_Call) Return(_a0 domain.Key) *MockHashable_Hash_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHashable_Hash_Call) RunAndReturn(run func() domain.Key) *MockHashable_Hash_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHashable creates a new instance of MockHashable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHashable(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHashable {
	mock := &MockHashable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
