// Code generated by mockery v2.40.1. DO NOT EDIT.

package conch

import (
	context "context"
	sync "sync"

	mock "github.com/stretchr/testify/mock"
)

// MockChainFunc is an autogenerated mock type for the ChainFunc type
type MockChainFunc[T interface{}] struct {
	mock.Mock
}

type MockChainFunc_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *MockChainFunc[T]) EXPECT() *MockChainFunc_Expecter[T] {
	return &MockChainFunc_Expecter[T]{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, wg, inStream
func (_m *MockChainFunc[T]) Execute(ctx context.Context, wg *sync.WaitGroup, inStream <-chan T) {
	_m.Called(ctx, wg, inStream)
}

// MockChainFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockChainFunc_Execute_Call[T interface{}] struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - wg *sync.WaitGroup
//   - inStream <-chan T
func (_e *MockChainFunc_Expecter[T]) Execute(ctx interface{}, wg interface{}, inStream interface{}) *MockChainFunc_Execute_Call[T] {
	return &MockChainFunc_Execute_Call[T]{Call: _e.mock.On("Execute", ctx, wg, inStream)}
}

func (_c *MockChainFunc_Execute_Call[T]) Run(run func(ctx context.Context, wg *sync.WaitGroup, inStream <-chan T)) *MockChainFunc_Execute_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sync.WaitGroup), args[2].(<-chan T))
	})
	return _c
}

func (_c *MockChainFunc_Execute_Call[T]) Return() *MockChainFunc_Execute_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *MockChainFunc_Execute_Call[T]) RunAndReturn(run func(context.Context, *sync.WaitGroup, <-chan T)) *MockChainFunc_Execute_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockChainFunc creates a new instance of MockChainFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChainFunc[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChainFunc[T] {
	mock := &MockChainFunc[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
