// Code generated by mockery v2.26.0. DO NOT EDIT.

package conch

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockGenerator is an autogenerated mock type for the Generator type
type MockGenerator[T interface{}] struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx
func (_m *MockGenerator[T]) Execute(ctx context.Context) (<-chan T, error) {
	ret := _m.Called(ctx)

	var r0 <-chan T
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (<-chan T, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) <-chan T); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan T)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockGenerator interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockGenerator creates a new instance of MockGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockGenerator[T interface{}](t mockConstructorTestingTNewMockGenerator) *MockGenerator[T] {
	mock := &MockGenerator[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
