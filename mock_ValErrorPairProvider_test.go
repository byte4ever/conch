// Code generated by mockery v2.40.1. DO NOT EDIT.

package conch

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockValErrorPairProvider is an autogenerated mock type for the ValErrorPairProvider type
type MockValErrorPairProvider[R interface{}] struct {
	mock.Mock
}

type MockValErrorPairProvider_Expecter[R interface{}] struct {
	mock *mock.Mock
}

func (_m *MockValErrorPairProvider[R]) EXPECT() *MockValErrorPairProvider_Expecter[R] {
	return &MockValErrorPairProvider_Expecter[R]{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx
func (_m *MockValErrorPairProvider[R]) Execute(ctx context.Context) ValErrorPair[R] {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 ValErrorPair[R]
	if rf, ok := ret.Get(0).(func(context.Context) ValErrorPair[R]); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ValErrorPair[R])
	}

	return r0
}

// MockValErrorPairProvider_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockValErrorPairProvider_Execute_Call[R interface{}] struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockValErrorPairProvider_Expecter[R]) Execute(ctx interface{}) *MockValErrorPairProvider_Execute_Call[R] {
	return &MockValErrorPairProvider_Execute_Call[R]{Call: _e.mock.On("Execute", ctx)}
}

func (_c *MockValErrorPairProvider_Execute_Call[R]) Run(run func(ctx context.Context)) *MockValErrorPairProvider_Execute_Call[R] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockValErrorPairProvider_Execute_Call[R]) Return(_a0 ValErrorPair[R]) *MockValErrorPairProvider_Execute_Call[R] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockValErrorPairProvider_Execute_Call[R]) RunAndReturn(run func(context.Context) ValErrorPair[R]) *MockValErrorPairProvider_Execute_Call[R] {
	_c.Call.Return(run)
	return _c
}

// NewMockValErrorPairProvider creates a new instance of MockValErrorPairProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockValErrorPairProvider[R interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockValErrorPairProvider[R] {
	mock := &MockValErrorPairProvider[R]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
