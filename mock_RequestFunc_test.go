// Code generated by mockery v2.40.1. DO NOT EDIT.

package conch

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockRequestFunc is an autogenerated mock type for the RequestFunc type
type MockRequestFunc[P interface{}, R interface{}] struct {
	mock.Mock
}

type MockRequestFunc_Expecter[P interface{}, R interface{}] struct {
	mock *mock.Mock
}

func (_m *MockRequestFunc[P, R]) EXPECT() *MockRequestFunc_Expecter[P, R] {
	return &MockRequestFunc_Expecter[P, R]{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, params
func (_m *MockRequestFunc[P, R]) Execute(ctx context.Context, params P) (R, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 R
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, P) (R, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, P) R); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(R)
	}

	if rf, ok := ret.Get(1).(func(context.Context, P) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRequestFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockRequestFunc_Execute_Call[P interface{}, R interface{}] struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - params P
func (_e *MockRequestFunc_Expecter[P, R]) Execute(ctx interface{}, params interface{}) *MockRequestFunc_Execute_Call[P, R] {
	return &MockRequestFunc_Execute_Call[P, R]{Call: _e.mock.On("Execute", ctx, params)}
}

func (_c *MockRequestFunc_Execute_Call[P, R]) Run(run func(ctx context.Context, params P)) *MockRequestFunc_Execute_Call[P, R] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(P))
	})
	return _c
}

func (_c *MockRequestFunc_Execute_Call[P, R]) Return(_a0 R, _a1 error) *MockRequestFunc_Execute_Call[P, R] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRequestFunc_Execute_Call[P, R]) RunAndReturn(run func(context.Context, P) (R, error)) *MockRequestFunc_Execute_Call[P, R] {
	_c.Call.Return(run)
	return _c
}

// NewMockRequestFunc creates a new instance of MockRequestFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRequestFunc[P interface{}, R interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRequestFunc[P, R] {
	mock := &MockRequestFunc[P, R]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
