// Code generated by mockery v2.26.0. DO NOT EDIT.

package conch

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockRequestFunc is an autogenerated mock type for the RequestFunc type
type MockRequestFunc[P interface{}, R interface{}] struct {
	mock.Mock
}

// Execute provides a mock function with given fields: _a0, _a1
func (_m *MockRequestFunc[P, R]) Execute(_a0 context.Context, _a1 P) (R, error) {
	ret := _m.Called(_a0, _a1)

	var r0 R
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, P) (R, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, P) R); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(R)
	}

	if rf, ok := ret.Get(1).(func(context.Context, P) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockRequestFunc interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRequestFunc creates a new instance of MockRequestFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRequestFunc[P interface{}, R interface{}](t mockConstructorTestingTNewMockRequestFunc) *MockRequestFunc[P, R] {
	mock := &MockRequestFunc[P, R]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
