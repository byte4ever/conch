// Code generated by mockery v2.26.0. DO NOT EDIT.

package conch

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockProcessor is an autogenerated mock type for the Processor type
type MockProcessor[From interface{}, To interface{}] struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx, input
func (_m *MockProcessor[From, To]) Execute(ctx context.Context, input <-chan From) <-chan To {
	ret := _m.Called(ctx, input)

	var r0 <-chan To
	if rf, ok := ret.Get(0).(func(context.Context, <-chan From) <-chan To); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan To)
		}
	}

	return r0
}

type mockConstructorTestingTNewMockProcessor interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockProcessor creates a new instance of MockProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockProcessor[From interface{}, To interface{}](t mockConstructorTestingTNewMockProcessor) *MockProcessor[From, To] {
	mock := &MockProcessor[From, To]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
