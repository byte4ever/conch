// Code generated by mockery v2.40.1. DO NOT EDIT.

package conch

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockProcessor is an autogenerated mock type for the Processor type
type MockProcessor[From interface{}, To interface{}] struct {
	mock.Mock
}

type MockProcessor_Expecter[From interface{}, To interface{}] struct {
	mock *mock.Mock
}

func (_m *MockProcessor[From, To]) EXPECT() *MockProcessor_Expecter[From, To] {
	return &MockProcessor_Expecter[From, To]{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, input
func (_m *MockProcessor[From, To]) Execute(ctx context.Context, input <-chan From) <-chan To {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 <-chan To
	if rf, ok := ret.Get(0).(func(context.Context, <-chan From) <-chan To); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan To)
		}
	}

	return r0
}

// MockProcessor_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockProcessor_Execute_Call[From interface{}, To interface{}] struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - input <-chan From
func (_e *MockProcessor_Expecter[From, To]) Execute(ctx interface{}, input interface{}) *MockProcessor_Execute_Call[From, To] {
	return &MockProcessor_Execute_Call[From, To]{Call: _e.mock.On("Execute", ctx, input)}
}

func (_c *MockProcessor_Execute_Call[From, To]) Run(run func(ctx context.Context, input <-chan From)) *MockProcessor_Execute_Call[From, To] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(<-chan From))
	})
	return _c
}

func (_c *MockProcessor_Execute_Call[From, To]) Return(_a0 <-chan To) *MockProcessor_Execute_Call[From, To] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProcessor_Execute_Call[From, To]) RunAndReturn(run func(context.Context, <-chan From) <-chan To) *MockProcessor_Execute_Call[From, To] {
	_c.Call.Return(run)
	return _c
}

// NewMockProcessor creates a new instance of MockProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProcessor[From interface{}, To interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProcessor[From, To] {
	mock := &MockProcessor[From, To]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
