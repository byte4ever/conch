// Code generated by mockery v2.40.1. DO NOT EDIT.

package conch

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockRequestProcessingFunc is an autogenerated mock type for the RequestProcessingFunc type
type MockRequestProcessingFunc[P interface{}, R interface{}] struct {
	mock.Mock
}

type MockRequestProcessingFunc_Expecter[P interface{}, R interface{}] struct {
	mock *mock.Mock
}

func (_m *MockRequestProcessingFunc[P, R]) EXPECT() *MockRequestProcessingFunc_Expecter[P, R] {
	return &MockRequestProcessingFunc_Expecter[P, R]{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, id, params
func (_m *MockRequestProcessingFunc[P, R]) Execute(ctx context.Context, id int, params P) (R, error) {
	ret := _m.Called(ctx, id, params)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 R
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, P) (R, error)); ok {
		return rf(ctx, id, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, P) R); ok {
		r0 = rf(ctx, id, params)
	} else {
		r0 = ret.Get(0).(R)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, P) error); ok {
		r1 = rf(ctx, id, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRequestProcessingFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockRequestProcessingFunc_Execute_Call[P interface{}, R interface{}] struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
//   - params P
func (_e *MockRequestProcessingFunc_Expecter[P, R]) Execute(ctx interface{}, id interface{}, params interface{}) *MockRequestProcessingFunc_Execute_Call[P, R] {
	return &MockRequestProcessingFunc_Execute_Call[P, R]{Call: _e.mock.On("Execute", ctx, id, params)}
}

func (_c *MockRequestProcessingFunc_Execute_Call[P, R]) Run(run func(ctx context.Context, id int, params P)) *MockRequestProcessingFunc_Execute_Call[P, R] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(P))
	})
	return _c
}

func (_c *MockRequestProcessingFunc_Execute_Call[P, R]) Return(_a0 R, _a1 error) *MockRequestProcessingFunc_Execute_Call[P, R] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRequestProcessingFunc_Execute_Call[P, R]) RunAndReturn(run func(context.Context, int, P) (R, error)) *MockRequestProcessingFunc_Execute_Call[P, R] {
	_c.Call.Return(run)
	return _c
}

// NewMockRequestProcessingFunc creates a new instance of MockRequestProcessingFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRequestProcessingFunc[P interface{}, R interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRequestProcessingFunc[P, R] {
	mock := &MockRequestProcessingFunc[P, R]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
